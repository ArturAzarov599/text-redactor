{"version":3,"sources":["components/header/header.component.jsx","redux/words/words.types.js","redux/words/words.actions.js","components/word/word.component.jsx","components/words-list/words-list.component.jsx","colors.array.js","fontSizes.array.js","components/field/field.component.jsx","components/content/content.component.jsx","components/word-changes/words-changes.component.jsx","App.jsx","reportWebVitals.js","redux/words/words.reducer.js","redux/rootReducer.js","redux/words/words.sagas.js","redux/root-saga/root-sagas.js","redux/store.js","index.js"],"names":["Header","className","WordsActionTypes","ADD_WORD","SELECT_VALUE","RESELECT_VALUE","SELECT_VALUE_ITEM","EDIT_NEW_CHANGES","CHECK_ELEMENT_PARAMETERS","CHECK_LETTERS_ARRAY","checkValueInArray","data","type","payload","Word","props","id","lettersArray","dispatch","useDispatch","onClick","event","stopPropagation","showSelectItem","map","uniqueId","letter","color","backgroundColor","fontSize","style","WordList","wordsArray","word","uniqueKey","colorArray","fontSizesArray","Field","useSelector","state","words","useState","text","textObject","setTextObject","onChangeHandler","target","name","value","addWord","split","v4","title","onChange","onKeyPress","key","preventDefault","defaultValue","colorElement","size","console","log","JSON","stringify","Content","WordsChanges","selectedValue","selectValue","newValue","setNewValue","useEffect","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","INITIAL_STATE","showSelectedItem","wordsReducer","action","newArray","window","getSelection","toString","filter","index","arrayShowSelectionText","getFirstIndexOfMatch","match","splice","length","arrayOfChangesSelectedValue","lettersData","reverse","letterObject","object","findIndex","spaceArray","concat","pop","findElementIndex","originalString","prevFontSize","prevColor","prevBackgroundColor","changedColor","changedBackgroundColor","changedFontSize","selectedString","indexOfMatch","letterArrayWithChangesParameters","leftArrayBeforeSelect","slice","leftArrayAfterSelect","createTextFromLettersArray","array","forEach","prevArray","nextArray","arrayWithChanges","indexArrayElement","indexOf","clearedArray","obj","rootReducer","combineReducers","checkParameters","addWordInListSaga","checkLettersArrayParameters","editChangesIntoLettersArray","WordsSagas","put","takeLatest","all","call","rootSaga","saga","createSagaMiddleware","store","createStore","applyMiddleware","logger","run","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2TAceA,G,YAVA,kBACX,wBAAQC,UAAW,SAAnB,SACI,qBAAKA,UAAU,gCAAf,SACI,qBAAKA,UAAU,gBAAf,SACI,yD,sDCIDC,EAZU,CACrBC,SAAU,WACVC,aAAc,eACdC,eAAgB,iBAChBC,kBAAmB,oBACnBC,iBAAkB,mBAGlBC,yBAA0B,2BAC1BC,oBAAoB,uBCiBXC,EAAoB,SAAAC,GAAI,MAAK,CACtCC,KAAMV,EAAiBM,yBACvBK,QAASF,ICMEG,G,YA5BF,SAACC,GAAW,IAEdC,EAAoBD,EAApBC,GAAIC,EAAgBF,EAAhBE,aACLC,EAAWC,cAWjB,OACI,sBAAKlB,UAAW,WAAYmB,QAVX,SAACC,GAClBA,EAAMC,kBAENJ,EDCsB,SAAAF,GAAE,MAAK,CACjCJ,KAAMV,EAAiBI,kBACvBO,QAASG,GCHIO,CAAeP,IAExBE,EDT0B,CAC9BN,KAAMV,EAAiBE,gBCanB,UAEQa,EAAaO,KAAI,WAA6CC,GAA7C,IAAEC,EAAF,EAAEA,OAAQC,EAAV,EAAUA,MAAOC,EAAjB,EAAiBA,gBAAiBC,EAAlC,EAAkCA,SAAlC,OAA0D,sBAAMC,MAAO,CACpFH,QACAC,kBACAC,YAHuE,SAIxDH,GAAXD,MAEX,MARmDT,KCNjDe,EAVE,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,WACf,OACI,qBAAK/B,UAAU,aAAf,SAEQ+B,EAAWR,KAAI,SAACS,EAAMC,GAAP,OAAqB,cAAC,EAAD,eAA2BD,GAAhBC,SCPhDC,EAFI,CAAC,IAAI,QAAS,QAAS,MAAO,SAAU,SAAU,SAAU,WCEhEC,EAFQ,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,ICoHjFC,EA1GD,WAEV,IAAML,EAAaM,aAAY,SAAAC,GAAK,OAAIA,EAAMC,MAAMR,cAC9Cd,EAAWC,cAHD,EAIoBsB,mBAAS,CACzCC,KAAM,GACNf,MAAO,GACPC,gBAAiB,GACjBC,SAAU,KARE,mBAITc,EAJS,KAIGC,EAJH,KAWTF,EAA0CC,EAA1CD,KAAMf,EAAoCgB,EAApChB,MAAOC,EAA6Be,EAA7Bf,gBAAiBC,EAAYc,EAAZd,SAE/BgB,EAAkB,SAAAxB,GAAU,IAAD,EACPA,EAAMyB,OAArBC,EADsB,EACtBA,KAAMC,EADgB,EAChBA,MAEbJ,EAAc,2BAAID,GAAL,kBAAkBI,EAAOC,MAGpCC,EAAU,WACZ,IL5BqBtC,EK8BfM,EAFUyB,EAAKQ,MAAM,IAEE1B,KAAI,SAAAE,GAAM,MAAK,CACxCA,SACAC,MAAOA,GAAS,IAChBC,gBAAiBA,GAAmB,GACpCC,UAAWA,GAAY,OAG3BX,GLrCqBP,EKqCE,CACnBK,GAAImC,cACJxB,QACAC,kBACAC,WACAa,OACAzB,gBL3C0B,CAClCL,KAAMV,EAAiBC,SACvBU,QAASF,KK4CLiC,EAAc,CACVF,KAAM,GACNb,SAAU,GACVD,gBAAiB,GACjBD,MAAO,MAsBf,OACI,sBAAK1B,UAAU,kBAAf,UACI,sBAAKmD,MAAM,8CAA8CnD,UAAU,+BAAnE,UACI,0BAAU8C,KAAK,OAAOC,MAAOL,EAAWD,KAAMW,SAAUR,EAC9CS,WApBI,SAAAjC,GACtB,GAAkB,UAAdA,EAAMkC,KAAiC,MAAdlC,EAAMkC,IAE/B,OADAlC,EAAMmC,iBACCP,OAkBH,wBAAQQ,aAAcd,EAAWhB,MAAOqB,MAAOL,EAAWhB,MAAOoB,KAAK,QAC9DM,SAAUR,EADlB,SAGQV,EAAWX,KAAI,SAAAG,GAAK,OAAI,wBAAoBG,MAAO,CAC/CH,MAAO,QACPC,gBAAiBD,GAEWqB,MAAOrB,EAJf,SAIuBA,GAJVA,QAQ7C,wBAAQ8B,aAAcd,EAAWf,gBAAiBoB,MAAOL,EAAWf,gBAC5DmB,KAAK,kBAAkBM,SAAUR,EADzC,SAGQV,EAAWX,KAAI,SAAAkC,GAAY,OAAI,wBACQ5B,MAAO,CACHH,MAAO,QACPC,gBAAiB8B,GAErBV,MAAOU,EALf,SAK8BA,GALjBA,QASpD,wBAAQD,aAAcd,EAAWd,SAAUmB,MAAOL,EAAWd,SAAUkB,KAAK,WACpEM,SAAUR,EADlB,SAGQT,EAAeZ,KAAI,SAAAmC,GAAI,OAAI,wBAAmBX,MAAOW,EAA1B,SAAiCA,GAApBA,QAGhD,wBAAQvC,QApDF,kBAAM6B,KAoDZ,sBACA,wBAAQ7B,QA5CE,WAClB,OAAOY,EAAWR,KAAI,gBAAEkB,EAAF,EAAEA,KAAMf,EAAR,EAAQA,MAAOE,EAAf,EAAeA,SAAUD,EAAzB,EAAyBA,gBAAzB,OAA8CgC,QAAQC,IAAIC,KAAKC,UAAU,CAC3FrB,OACAf,QACAC,kBACAC,SAAUA,EAAW,YAuCjB,gCAEJ,cAAC,EAAD,CAAUG,WAAYA,QClGnBgC,EARC,kBACZ,sBAAM/D,UAAU,oBAAhB,SACI,qBAAKA,UAAU,iCAAf,SACI,cAAC,EAAD,SC4EGgE,G,MA5EM,WAEjB,IAAMC,EAAgB5B,aAAY,SAAAC,GAAK,OAAIA,EAAMC,MAAM2B,eACjDjD,EAAWC,cAHM,EAISsB,mBAAS,CACrCC,KAAM,GACNf,MAAO,GACPE,SAAU,GACVD,gBAAiB,KARE,mBAIhBwC,EAJgB,KAINC,EAJM,KAWvBC,qBAAU,WACND,EAAY,CACR3B,KAAMwB,EACNrC,SAAU,GACVD,gBAAiB,GACjBD,MAAO,OAEZ,CAACuC,IAEJ,IAAMrB,EAAkB,SAAAxB,GAEpBA,EAAMC,kBAFuB,MAGPD,EAAMyB,OAArBC,EAHsB,EAGtBA,KAAMC,EAHgB,EAGhBA,MAEbqB,EAAY,2BAAID,GAAL,kBAAgBrB,EAAOC,MActC,OACI,sBAAK/C,UAAW,gBAAhB,UAEI,0BAAU8C,KAAK,OAAOC,MAAOoB,EAAS1B,KAAMW,SAAUR,IAEtD,wBAAQG,MAAOoB,EAASzC,MAAOoB,KAAK,QAAQM,SAAUR,EAAtD,SAEQV,EAAWX,KAAI,SAAAG,GAAK,OAAI,wBAAoBG,MAAO,CAC/CH,MAAO,QACPC,gBAAiBD,GAEWqB,MAAOrB,EAJf,SAIuBA,GAJVA,QAQ7C,wBAAQqB,MAAOoB,EAASxC,gBAAiBmB,KAAK,kBAAkBM,SAAUR,EAA1E,SAEQV,EAAWX,KAAI,SAAAkC,GAAY,OAAI,wBACQ5B,MAAO,CACHH,MAAO,QACPC,gBAAiB8B,GAErBV,MAAOU,EALf,SAK8BA,GALjBA,QASpD,wBAAQD,aAAa,KAAKV,KAAK,WAAWM,SAAUR,EAApD,SAEQT,EAAeZ,KAAI,SAAAmC,GAAI,OAAI,wBAAmBX,MAAOW,EAA1B,SAAiCA,GAApBA,QAIhD,wBAAQvC,QA3CI,WAChBF,EPjB+B,CACnCN,KAAMV,EAAiBK,iBACvBM,QOe4BuD,IAExBC,EAAY,CACR3B,KAAM,GACNb,SAAU,GACVF,MAAO,GACPC,gBAAiB,MAoCjB,+BCvDG2C,EAfH,WAER,IAAMrD,EAAWC,cAEjB,OACI,sBAAKlB,UAAU,MAAf,UACI,cAAC,EAAD,IACA,cAAC,EAAD,IACA,qBAAKmB,QAAS,kBAAMF,ERNI,CAChCN,KAAMV,EAAiBG,kBQKf,SACI,cAAC,EAAD,UCNDmE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,gBCJRQ,EAAgB,CAClBjD,WAAY,GACZmC,YAAa,GACbe,iBAAkB,MAsLPC,EAnLM,WAAoC,IAAnC5C,EAAkC,uDAA1B0C,EAAeG,EAAW,uCAE1CC,EAAQ,YAAO9C,EAAMP,YAE3B,OAAQoD,EAAOxE,MACX,KAAKV,EAAiBC,SAClB,OAAO,2BACAoC,GADP,IACcP,WAAW,GAAD,mBAAMO,EAAMP,YAAZ,CAAwBoD,EAAOvE,YAG3D,KAAKX,EAAiBG,eAClB,OAAO,2BACAkC,GADP,IACc4B,YAAa,KAG/B,KAAKjE,EAAiBE,aAClB,OAAO,2BACAmC,GADP,IACc4B,YAAamB,OAAOC,eAAeC,YAAc,MAGnE,KAAKtF,EAAiBI,kBAClB,OAAO,2BACAiC,GADP,IACc2C,iBAAkB3C,EAAMP,WAAWyD,QAAO,SAAAxD,GAAI,OAAIA,EAAKjB,KAAOoE,EAAOvE,aAGvF,KAAKX,EAAiBK,iBAAtB,MAEqD6E,EAAOvE,QAAjDe,EAFX,EAEWA,gBAAiBD,EAF5B,EAE4BA,MAAOE,EAFnC,EAEmCA,SAAUa,EAF7C,EAE6CA,KAEnCgD,EAAQnD,EAAM2C,iBAAiB,GAAGlE,GAClC2E,EAAyBpD,EAAM2C,iBAAiB,GAAGjE,aACnD2E,EAAuBrD,EAAM2C,iBAAiB,GAAGxC,KAAKmD,MAAMtD,EAAM4B,aAAauB,MAErFC,EAAuBG,OAAOF,EAAsBrD,EAAM4B,YAAY4B,QAEtE,IAAMC,EAA8BtD,EAAKQ,MAAM,IAAI1B,KAAI,SAAAE,GAAM,MAAK,CAC9DA,SACAC,QACAC,kBACAC,UAAWA,MAmBf,OAhBAmE,EAA4BxE,KAAI,SAAAyE,GAAW,OAAIA,EAAYvE,UACtDwE,UAAU1E,KAAI,SAAA2E,GAAY,OAAIR,EAC9BG,OAAOF,EAAsB,EAAG,CAC7BlE,OAAQyE,EACRvE,kBACAD,QACAE,UAAWA,OAGnBwD,EAAS7D,KAAI,SAAA4E,GACT,OAAIA,EAAOpF,KAAO0E,EACPU,EAAOnF,aAAe0E,EAE1BS,KAGJ,2BACA7D,GADP,IACcP,WAAYqD,IAG9B,KAAKnF,EAAiBM,yBAElB,IAAM6F,EAAY9D,EAAMP,WAAW+D,OAAS,EAC5C,GAAIX,EAAOvE,QAAQI,cACXoF,GAAa,GACThB,EAASgB,GAAW1E,QAAUyD,EAAOvE,QAAQc,OAC7C0D,EAASgB,GAAWzE,kBAAoBwD,EAAOvE,QAAQe,iBACvDyD,EAASgB,GAAWxE,WAAauD,EAAOvE,QAAQgB,SAAU,CAE1D,IAAMyE,EAAa,CAAC,CAChB5E,OAAQ,IACRC,MAAOyD,EAAOvE,QAAQc,MACtBC,gBAAiBwD,EAAOvE,QAAQe,gBAChCC,UAAWuD,EAAOvE,QAAQgB,WAc9B,OAXAwD,EAASgB,GAAa,CAClBrF,GAAIqE,EAASgB,GAAWrF,GACxBW,MAAOyD,EAAOvE,QAAQc,MACtBC,gBAAiBwD,EAAOvE,QAAQe,gBAChCC,SAAUuD,EAAOvE,QAAQgB,SACzBa,KAAM2C,EAASgB,GAAW3D,KAAO,IAAM0C,EAAOvE,QAAQ6B,KACtDzB,aAAcoE,EAASgB,GAAWpF,aAAasF,OAAOD,EAAYlB,EAAOvE,QAAQI,eAGrFoE,EAASmB,MAEF,2BACAjE,GADP,IACcP,WAAYqD,IAItC,OAAO,2BACA9C,GADP,IACcP,WAAYqD,IAG9B,KAAKnF,EAAiBO,oBAElB,IAAMgG,EAAmBlE,EAAM2C,iBAAiB,GAAGlE,GAE7C0F,EAAiBnE,EAAM2C,iBAAiB,GAAGxC,KAE3CiE,EAAepE,EAAM2C,iBAAiB,GAAGrD,SACzC+E,EAAYrE,EAAM2C,iBAAiB,GAAGvD,MACtCkF,EAAsBtE,EAAM2C,iBAAiB,GAAGtD,gBAEhDkF,EAAe1B,EAAOvE,QAAQc,MAC9BoF,EAAyB3B,EAAOvE,QAAQe,gBACxCoF,EAAkB5B,EAAOvE,QAAQgB,SAEjCoF,EAAiB1E,EAAM4B,YACvB+C,EAAeR,EAAeb,MAAMoB,GAAgBvB,MACpDzE,EAAesB,EAAM2C,iBAAiB,GAAGjE,aAGzCkG,EAAmClG,EACpCwE,QAAO,SAAAW,GAAM,OAAIA,EAAOxE,kBAAoBmF,GAA0BX,EAAOzE,QAAUmF,GAAgBV,EAAOvE,YAAcmF,KAE3HI,EAAwBnG,EAAaoG,QAAQvB,OAAO,EAAGoB,GACvDI,EACFrG,EAAaoG,QAAQvB,OAAOmB,EAAelB,OAASmB,EAAcR,EAAeX,OAASkB,EAAelB,OAASmB,GAEhHK,EAA6B,SAAAC,GAC/B,IAAI9E,EAAO,GAEX,OADA8E,EAAMC,SAAQ,SAAArB,GAAM,OAAI1D,GAAQ0D,EAAO1E,UAChCgB,GAGLgF,EAAY,CACd1G,GAAImC,cACJxB,MAAOiF,EACPhF,gBAAiBiF,EACjBhF,SAAU8E,EACV1F,aAAcmG,EACd1E,KAAM6E,EAA2BH,IAG/BO,EAAY,CACd3G,GAAImC,cACJxB,MAAOiF,EACPhF,gBAAiBiF,EACjBhF,UAAW8E,EACX1F,aAAcqG,EACd5E,KAAM6E,EAA2BD,IAI/BM,EAAmB,CACrB5G,GAAImC,cACJxB,MAAOmF,EACPlF,gBAAiBmF,EACjBlF,UAAWmF,EACX/F,aAAckG,EACdzE,KAAM6E,EAA2BJ,IAIrC9B,EAAS7D,KAAI,SAAA4E,GACT,GAAIA,EAAOpF,KAAOyF,EAAkB,CAChC,IAAMoB,EAAoBxC,EAASyC,QAAQ1B,GAC3C,OAAOf,EAASS,OAAO+B,EAAmB,EAAGH,EAAWE,EAAkBD,GAE9E,OAAOvB,KAGX,IAAM2B,EAAe1C,EAASI,QAAO,SAAAuC,GAAG,OAAIA,EAAI/G,aAAa8E,OAAS,KAEtE,OAAO,2BACAxD,GADP,IACcP,WAAY+F,IAG9B,QACI,OAAOxF,IChLR0F,EAJKC,YAAgB,CAChC1F,MAAO2C,I,2DCEDgD,G,WAOAC,G,WAKAC,G,WAOAC,G,WAKeC,GAxBzB,SAAUJ,EAAgBpH,GAA1B,mFAGI,OAFOF,EAAWE,EAAXF,QACAG,EAA4DH,EAA5DG,GAAIW,EAAwDd,EAAxDc,MAAOC,EAAiDf,EAAjDe,gBAAiBC,EAAgChB,EAAhCgB,SAAUZ,EAAsBJ,EAAtBI,aAAcyB,EAAQ7B,EAAR6B,KAF/D,SAGU8F,YAAI9H,EAAkB,CAACM,KAAIW,QAAOC,kBAAiBC,WAAUZ,eAAcyB,UAHrF,uCAOA,SAAU0F,IAAV,iEACI,OADJ,SACUK,YAAWvI,EAAiBC,SAAUgI,GADhD,uCAKA,SAAUE,EAA4BtH,GAAtC,uEAGI,OAFA6C,QAAQC,IAAI9C,GACLF,EAAWE,EAAXF,QAFX,SAGU2H,YZUgC,CACtC5H,KAAKV,EAAiBO,oBACtBI,QYZ4BA,IAHhC,OAII,OAJJ,SAIU2H,YAAI9H,EAAkBG,IAJhC,uCAOA,SAAUyH,IAAV,iEACI,OADJ,SACUG,YAAWvI,EAAiBK,iBAAkB8H,GADxD,uCAKe,SAAUE,IAAV,iEACX,OADW,SACLG,YAAI,CACNC,YAAKP,GACLO,YAAKL,KAHE,uC,eC3BLM,GAAV,SAAUA,IAAV,iEACI,OADJ,SACUF,YAAI,CACNC,YAAKJ,KAFb,uCAMeK,QCHTC,EAAOC,cAEPC,EAAQC,YAAYf,EAAagB,YAAgBJ,EAAMK,MAE7DL,EAAKM,IAAIP,GAEMG,QCLfK,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,CAAUP,MAAOA,EAAjB,SACI,cAAC,EAAD,QAGRQ,SAASC,eAAe,SAM5BhF,M","file":"static/js/main.beab5e71.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport \"./header.styles.css\";\r\n\r\nconst Header = () => (\r\n    <header className={\"header\"}>\r\n        <div className=\"header__container __container\">\r\n            <div className=\"header__title\">\r\n                <span>Text redactor</span>\r\n            </div>\r\n        </div>\r\n    </header>\r\n);\r\n\r\nexport default Header;\r\n","const WordsActionTypes = {\r\n    ADD_WORD: \"ADD_WORD\",\r\n    SELECT_VALUE: \"SELECT_VALUE\",\r\n    RESELECT_VALUE: \"RESELECT_VALUE\",\r\n    SELECT_VALUE_ITEM: \"SELECT_VALUE_ITEM\",\r\n    EDIT_NEW_CHANGES: \"EDIT_NEW_CHANGES\",\r\n\r\n    //Saga\r\n    CHECK_ELEMENT_PARAMETERS: \"CHECK_ELEMENT_PARAMETERS\",\r\n    CHECK_LETTERS_ARRAY:\"CHECK_LETTERS_ARRAY\"\r\n}\r\n\r\nexport default WordsActionTypes;\r\n","import WordsActionTypes from \"./words.types\";\r\n\r\nexport const addWordToList = data => ({\r\n    type: WordsActionTypes.ADD_WORD,\r\n    payload: data\r\n})\r\n\r\nexport const selectValue = () => ({\r\n    type: WordsActionTypes.SELECT_VALUE\r\n})\r\n\r\nexport const reselectValue = () => ({\r\n    type: WordsActionTypes.RESELECT_VALUE\r\n})\r\n\r\nexport const showSelectItem = id => ({\r\n    type: WordsActionTypes.SELECT_VALUE_ITEM,\r\n    payload: id\r\n})\r\n\r\nexport const editNewChanges = data => ({\r\n    type: WordsActionTypes.EDIT_NEW_CHANGES,\r\n    payload: data\r\n})\r\n\r\n// sagas actions\r\nexport const checkValueInArray = data => ({\r\n    type: WordsActionTypes.CHECK_ELEMENT_PARAMETERS,\r\n    payload: data\r\n})\r\n\r\nexport const checkLettersArray = data => ({\r\n    type:WordsActionTypes.CHECK_LETTERS_ARRAY,\r\n    payload: data\r\n})\r\n","import React from \"react\";\r\n\r\nimport \"./word.styles.css\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {selectValue, showSelectItem} from \"../../redux/words/words.actions\";\r\n\r\nconst Word = (props) => {\r\n\r\n    const {id, lettersArray} = props;\r\n    const dispatch = useDispatch();\r\n\r\n    const selectStroke = (event) => {\r\n        event.stopPropagation();\r\n\r\n        dispatch(showSelectItem(id))\r\n\r\n        dispatch(selectValue())\r\n\r\n    }\r\n\r\n    return (\r\n        <div className={\"word-div\"} onClick={selectStroke} key={id}>\r\n            {\r\n                lettersArray.map(({letter, color, backgroundColor, fontSize}, uniqueId) => <span style={{\r\n                    color,\r\n                    backgroundColor,\r\n                    fontSize\r\n                }} key={uniqueId}>{letter}</span>)\r\n            }\r\n            {\" \"}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Word;\r\n","import React from \"react\";\r\n\r\nimport \"./word-list.styles.css\";\r\nimport Word from \"../word/word.component\";\r\n\r\nconst WordList = ({wordsArray}) => {\r\n    return (\r\n        <div className=\"words-list\">\r\n            {\r\n                wordsArray.map((word, uniqueKey) => <Word key={uniqueKey}  {...word}/>)\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WordList;\r\n","const colorArray = [\" \",\"Blue \", \"Green\", \"Red\", \"Orange\", \"Violet\", \"Indigo\", \"Yellow \"];\r\n\r\nexport default colorArray;\r\n","const fontSizesArray = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40];\r\n\r\nexport default fontSizesArray;\r\n","import React, {useState} from \"react\";\r\n\r\nimport \"./field.styles.css\";\r\nimport {v4} from \"uuid\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {addWordToList} from \"../../redux/words/words.actions\";\r\nimport WordList from \"../words-list/words-list.component\";\r\nimport colorArray from \"../../colors.array\";\r\nimport fontSizesArray from \"../../fontSizes.array\";\r\n\r\nconst Field = () => {\r\n\r\n    const wordsArray = useSelector(state => state.words.wordsArray)\r\n    const dispatch = useDispatch();\r\n    const [textObject, setTextObject] = useState({\r\n        text: \"\",\r\n        color: \"\",\r\n        backgroundColor: \"\",\r\n        fontSize: 14\r\n    });\r\n\r\n    const {text, color, backgroundColor, fontSize} = textObject\r\n\r\n    const onChangeHandler = event => {\r\n        const {name, value} = event.target\r\n\r\n        setTextObject({...textObject, [name]: value})\r\n    }\r\n\r\n    const addWord = () => {\r\n        const letters = text.split(\"\")\r\n\r\n        const lettersArray = letters.map(letter => ({\r\n            letter,\r\n            color: color || \" \",\r\n            backgroundColor: backgroundColor || \"\",\r\n            fontSize: +fontSize || 14\r\n        }))\r\n\r\n        dispatch(addWordToList({\r\n            id: v4(),\r\n            color,\r\n            backgroundColor,\r\n            fontSize,\r\n            text,\r\n            lettersArray\r\n        }))\r\n\r\n        setTextObject({\r\n            text: \"\",\r\n            fontSize: 14,\r\n            backgroundColor: \"\",\r\n            color: \"\"\r\n        })\r\n    }\r\n\r\n    const onAddWord = () => addWord();\r\n\r\n    const onKeyPressHandler = event => {\r\n        if (event.key === 'Enter' || event.key === \" \") {\r\n            event.preventDefault();\r\n            return addWord();\r\n        }\r\n    }\r\n\r\n    const convertToJSON = () => {\r\n        return wordsArray.map(({text, color, fontSize, backgroundColor}) => console.log(JSON.stringify({\r\n            text,\r\n            color,\r\n            backgroundColor,\r\n            fontSize: fontSize + \"px\"\r\n        })));\r\n    }\r\n\r\n    return (\r\n        <div className=\"field-component\">\r\n            <div title=\"To add word click Enter, Space or Add word!\" className=\"field__container __container\">\r\n                <textarea name=\"text\" value={textObject.text} onChange={onChangeHandler}\r\n                          onKeyPress={onKeyPressHandler}/>\r\n                <select defaultValue={textObject.color} value={textObject.color} name=\"color\"\r\n                        onChange={onChangeHandler}>\r\n                    {\r\n                        colorArray.map(color => <option key={color} style={{\r\n                            color: \"white\",\r\n                            backgroundColor: color\r\n                        }}\r\n                                                        value={color}>{color}</option>)\r\n                    }\r\n                </select>\r\n\r\n                <select defaultValue={textObject.backgroundColor} value={textObject.backgroundColor}\r\n                        name=\"backgroundColor\" onChange={onChangeHandler}>\r\n                    {\r\n                        colorArray.map(colorElement => <option key={colorElement}\r\n                                                               style={{\r\n                                                                   color: \"white\",\r\n                                                                   backgroundColor: colorElement\r\n                                                               }}\r\n                                                               value={colorElement}>{colorElement}</option>)\r\n                    }\r\n                </select>\r\n\r\n                <select defaultValue={textObject.fontSize} value={textObject.fontSize} name=\"fontSize\"\r\n                        onChange={onChangeHandler}>\r\n                    {\r\n                        fontSizesArray.map(size => <option key={size} value={size}>{size}</option>)\r\n                    }\r\n                </select>\r\n                <button onClick={onAddWord}>Add word</button>\r\n                <button onClick={convertToJSON}>Convert to JSON</button>\r\n            </div>\r\n            <WordList wordsArray={wordsArray}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Field;\r\n","import React from \"react\";\r\n\r\nimport \"./content.styles.css\";\r\nimport Field from \"../field/field.component\";\r\n\r\nconst Content = () => (\r\n    <main className=\"content-component\">\r\n        <div className=\"content__container __container\">\r\n            <Field/>\r\n        </div>\r\n    </main>\r\n)\r\n\r\nexport default Content;\r\n","import React, {useEffect, useState} from \"react\";\r\n\r\nimport \"./words-changes.styles.css\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {editNewChanges} from \"../../redux/words/words.actions\";\r\nimport colorArray from \"../../colors.array\";\r\nimport fontSizesArray from \"../../fontSizes.array\";\r\n\r\nconst WordsChanges = () => {\r\n\r\n    const selectedValue = useSelector(state => state.words.selectValue);\r\n    const dispatch = useDispatch();\r\n    const [newValue, setNewValue] = useState({\r\n        text: \"\",\r\n        color: \"\",\r\n        fontSize: 14,\r\n        backgroundColor: \"\"\r\n    });\r\n\r\n    useEffect(() => {\r\n        setNewValue({\r\n            text: selectedValue,\r\n            fontSize: 14,\r\n            backgroundColor: \"\",\r\n            color: \"\"\r\n        })\r\n    }, [selectedValue])\r\n\r\n    const onChangeHandler = event => {\r\n\r\n        event.stopPropagation();\r\n        const {name, value} = event.target;\r\n\r\n        setNewValue({...newValue, [name]: value})\r\n    }\r\n\r\n    const editChanges = () => {\r\n        dispatch(editNewChanges(newValue))\r\n\r\n        setNewValue({\r\n            text: \"\",\r\n            fontSize: 14,\r\n            color: \"\",\r\n            backgroundColor: \"\"\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className={\"words-changes\"}>\r\n\r\n            <textarea name=\"text\" value={newValue.text} onChange={onChangeHandler}/>\r\n\r\n            <select value={newValue.color} name=\"color\" onChange={onChangeHandler}>\r\n                {\r\n                    colorArray.map(color => <option key={color} style={{\r\n                        color: \"white\",\r\n                        backgroundColor: color\r\n                    }}\r\n                                                    value={color}>{color}</option>)\r\n                }\r\n            </select>\r\n\r\n            <select value={newValue.backgroundColor} name=\"backgroundColor\" onChange={onChangeHandler}>\r\n                {\r\n                    colorArray.map(colorElement => <option key={colorElement}\r\n                                                           style={{\r\n                                                               color: \"white\",\r\n                                                               backgroundColor: colorElement\r\n                                                           }}\r\n                                                           value={colorElement}>{colorElement}</option>)\r\n                }\r\n            </select>\r\n\r\n            <select defaultValue=\"14\" name=\"fontSize\" onChange={onChangeHandler}>\r\n                {\r\n                    fontSizesArray.map(size => <option key={size} value={size}>{size}</option>)\r\n                }\r\n            </select>\r\n\r\n            <button onClick={editChanges}>Edit changes</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WordsChanges;\r\n","import React from \"react\";\n\nimport './App.css';\nimport Header from \"./components/header/header.component\";\nimport Content from \"./components/content/content.component\";\nimport {useDispatch} from \"react-redux\";\nimport {reselectValue} from \"./redux/words/words.actions\";\nimport WordsChanges from \"./components/word-changes/words-changes.component\";\n\nconst App = () => {\n\n    const dispatch = useDispatch();\n\n    return (\n        <div className=\"App\">\n            <Header/>\n            <WordsChanges/>\n            <div onClick={() => dispatch(reselectValue())}>\n                <Content/>\n            </div>\n        </div>\n    )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import WordsActionTypes from \"./words.types\";\r\nimport {v4} from \"uuid\";\r\n\r\nconst INITIAL_STATE = {\r\n    wordsArray: [],\r\n    selectValue: \"\",\r\n    showSelectedItem: null,\r\n}\r\n\r\nconst wordsReducer = (state = INITIAL_STATE, action) => {\r\n\r\n        const newArray = [...state.wordsArray];\r\n\r\n        switch (action.type) {\r\n            case WordsActionTypes.ADD_WORD:\r\n                return {\r\n                    ...state, wordsArray: [...state.wordsArray, action.payload]\r\n                }\r\n\r\n            case WordsActionTypes.RESELECT_VALUE:\r\n                return {\r\n                    ...state, selectValue: \"\"\r\n                }\r\n\r\n            case WordsActionTypes.SELECT_VALUE:\r\n                return {\r\n                    ...state, selectValue: window.getSelection().toString() || \" \"\r\n                }\r\n\r\n            case WordsActionTypes.SELECT_VALUE_ITEM:\r\n                return {\r\n                    ...state, showSelectedItem: state.wordsArray.filter(word => word.id === action.payload)\r\n                }\r\n\r\n            case WordsActionTypes.EDIT_NEW_CHANGES:\r\n\r\n                const {backgroundColor, color, fontSize, text} = action.payload;\r\n\r\n                const index = state.showSelectedItem[0].id;\r\n                const arrayShowSelectionText = state.showSelectedItem[0].lettersArray\r\n                const getFirstIndexOfMatch = state.showSelectedItem[0].text.match(state.selectValue).index\r\n\r\n                arrayShowSelectionText.splice(getFirstIndexOfMatch, state.selectValue.length);\r\n\r\n                const arrayOfChangesSelectedValue = text.split(\"\").map(letter => ({\r\n                    letter,\r\n                    color,\r\n                    backgroundColor,\r\n                    fontSize: +fontSize\r\n                }));\r\n\r\n                arrayOfChangesSelectedValue.map(lettersData => lettersData.letter)\r\n                    .reverse().map(letterObject => arrayShowSelectionText\r\n                    .splice(getFirstIndexOfMatch, 0, {\r\n                        letter: letterObject,\r\n                        backgroundColor,\r\n                        color,\r\n                        fontSize: +fontSize\r\n                    }))\r\n\r\n                newArray.map(object => {\r\n                    if (object.id === index) {\r\n                        return object.lettersArray = arrayShowSelectionText\r\n                    }\r\n                    return object\r\n                })\r\n\r\n                return {\r\n                    ...state, wordsArray: newArray\r\n                }\r\n\r\n            case WordsActionTypes.CHECK_ELEMENT_PARAMETERS:\r\n\r\n                const findIndex = state.wordsArray.length - 2;\r\n                if (action.payload.lettersArray)\r\n                    if (findIndex > -1)\r\n                        if (newArray[findIndex].color === action.payload.color &&\r\n                            newArray[findIndex].backgroundColor === action.payload.backgroundColor &&\r\n                            newArray[findIndex].fontSize === action.payload.fontSize) {\r\n\r\n                            const spaceArray = [{\r\n                                letter: \" \",\r\n                                color: action.payload.color,\r\n                                backgroundColor: action.payload.backgroundColor,\r\n                                fontSize: +action.payload.fontSize\r\n                            }]\r\n\r\n                            newArray[findIndex] = {\r\n                                id: newArray[findIndex].id,\r\n                                color: action.payload.color,\r\n                                backgroundColor: action.payload.backgroundColor,\r\n                                fontSize: action.payload.fontSize,\r\n                                text: newArray[findIndex].text + \" \" + action.payload.text,\r\n                                lettersArray: newArray[findIndex].lettersArray.concat(spaceArray, action.payload.lettersArray)\r\n                            }\r\n\r\n                            newArray.pop();\r\n\r\n                            return {\r\n                                ...state, wordsArray: newArray\r\n                            }\r\n                        }\r\n\r\n                return {\r\n                    ...state, wordsArray: newArray\r\n                }\r\n\r\n            case WordsActionTypes.CHECK_LETTERS_ARRAY:\r\n\r\n                const findElementIndex = state.showSelectedItem[0].id;\r\n\r\n                const originalString = state.showSelectedItem[0].text;\r\n\r\n                const prevFontSize = state.showSelectedItem[0].fontSize;\r\n                const prevColor = state.showSelectedItem[0].color;\r\n                const prevBackgroundColor = state.showSelectedItem[0].backgroundColor;\r\n\r\n                const changedColor = action.payload.color;\r\n                const changedBackgroundColor = action.payload.backgroundColor;\r\n                const changedFontSize = action.payload.fontSize;\r\n\r\n                const selectedString = state.selectValue;\r\n                const indexOfMatch = originalString.match(selectedString).index;\r\n                const lettersArray = state.showSelectedItem[0].lettersArray;\r\n\r\n\r\n                const letterArrayWithChangesParameters = lettersArray\r\n                    .filter(object => object.backgroundColor === changedBackgroundColor && object.color === changedColor && object.fontSize === +changedFontSize);\r\n\r\n                const leftArrayBeforeSelect = lettersArray.slice().splice(0, indexOfMatch);\r\n                const leftArrayAfterSelect =\r\n                    lettersArray.slice().splice(selectedString.length + indexOfMatch, originalString.length - selectedString.length - indexOfMatch);\r\n\r\n                const createTextFromLettersArray = array => {\r\n                    let text = \"\"\r\n                    array.forEach(object => text += object.letter)\r\n                    return text;\r\n                }\r\n\r\n                const prevArray = {\r\n                    id: v4(),\r\n                    color: prevColor,\r\n                    backgroundColor: prevBackgroundColor,\r\n                    fontSize: prevFontSize,\r\n                    lettersArray: leftArrayBeforeSelect,\r\n                    text: createTextFromLettersArray(leftArrayBeforeSelect)\r\n                }\r\n\r\n                const nextArray = {\r\n                    id: v4(),\r\n                    color: prevColor,\r\n                    backgroundColor: prevBackgroundColor,\r\n                    fontSize: +prevFontSize,\r\n                    lettersArray: leftArrayAfterSelect,\r\n                    text: createTextFromLettersArray(leftArrayAfterSelect)\r\n\r\n                }\r\n\r\n                const arrayWithChanges = {\r\n                    id: v4(),\r\n                    color: changedColor,\r\n                    backgroundColor: changedBackgroundColor,\r\n                    fontSize: +changedFontSize,\r\n                    lettersArray: letterArrayWithChangesParameters,\r\n                    text: createTextFromLettersArray(letterArrayWithChangesParameters)\r\n                }\r\n\r\n\r\n                newArray.map(object => {\r\n                    if (object.id === findElementIndex) {\r\n                        const indexArrayElement = newArray.indexOf(object)\r\n                        return newArray.splice(indexArrayElement, 1, prevArray, arrayWithChanges, nextArray)\r\n                    }\r\n                    return object\r\n                })\r\n\r\n                const clearedArray = newArray.filter(obj => obj.lettersArray.length > 0)\r\n\r\n                return {\r\n                    ...state, wordsArray: clearedArray\r\n                }\r\n\r\n            default:\r\n                return state\r\n        }\r\n    }\r\n;\r\n\r\nexport default wordsReducer;\r\n","import {combineReducers} from \"redux\";\r\nimport wordsReducer from \"./words/words.reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    words: wordsReducer\r\n})\r\n\r\nexport default rootReducer;\r\n","import {all, put, takeLatest, call} from \"redux-saga/effects\";\r\n\r\nimport WordsActionTypes from \"./words.types\";\r\nimport {checkLettersArray, checkValueInArray} from \"./words.actions\";\r\n\r\n//Check parameters\r\nfunction* checkParameters(props) {\r\n    const {payload} = props\r\n    const {id, color, backgroundColor, fontSize, lettersArray, text} = payload;\r\n    yield put(checkValueInArray({id, color, backgroundColor, fontSize, lettersArray, text}))\r\n\r\n}\r\n\r\nfunction* addWordInListSaga() {\r\n    yield takeLatest(WordsActionTypes.ADD_WORD, checkParameters)\r\n}\r\n\r\n//Check lettersArray\r\nfunction* checkLettersArrayParameters(props) {\r\n    console.log(props);\r\n    const {payload} = props\r\n    yield put(checkLettersArray(payload))\r\n    yield put(checkValueInArray(payload))\r\n}\r\n\r\nfunction* editChangesIntoLettersArray() {\r\n    yield takeLatest(WordsActionTypes.EDIT_NEW_CHANGES, checkLettersArrayParameters)\r\n}\r\n\r\n\r\nexport default function* WordsSagas() {\r\n    yield all([\r\n        call(addWordInListSaga),\r\n        call(editChangesIntoLettersArray),\r\n    ])\r\n}\r\n\r\n\r\n","import {all, call} from \"redux-saga/effects\"\r\nimport WordsSagas from \"../words/words.sagas\";\r\n\r\nfunction* rootSaga() {\r\n    yield all([\r\n        call(WordsSagas)\r\n    ])\r\n}\r\n\r\nexport default rootSaga;\r\n","import rootReducer from \"./rootReducer\";\r\nimport {applyMiddleware, createStore} from \"redux\";\r\nimport logger from \"redux-logger\";\r\nimport createSagaMiddleware from \"redux-saga\"\r\nimport rootSaga from \"./root-saga/root-sagas\";\r\n\r\nconst saga = createSagaMiddleware()\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(saga, logger))\r\n\r\nsaga.run(rootSaga)\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from \"./reportWebVitals\";\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}